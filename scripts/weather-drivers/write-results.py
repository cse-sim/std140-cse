print("\nInitializing Python...\n")
import openpyxl as xl
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import timedelta, datetime, date
import subprocess
import re
import mako.template as mk
import os

#%matplotlib inline

tests = 'weather-drivers'
# os.chdir('scripts/%s' % (tests)) # use only for Hydrogen testing in Atom
wb = xl.load_workbook(filename='../../reports/' + tests + '/WeatherDriversResultsSubmittal-Template.xlsx')
Sheet1 = wb['Program Info']
cases = ['WD100', 'WD200', 'WD300', 'WD400', 'WD500', 'WD600']

# Top level info
info = str(subprocess.check_output("..\\..\\CSE.exe", shell=True))
match = re.compile('.*CSE\s+([^\s]*)\s+.*',re.S).match(info)
if match:
  version = match.groups()[0]
else:
  print("ERROR: Unknown version!")
  version = "????"

# Program Info sheet
Sheet1.cell(column = 2, row = 3).value = "California Simulation Engine" # Program Name:
Sheet1.cell(column = 2, row = 4).value = "v{}".format(version) # Program Version:
Sheet1.cell(column = 2, row = 5).value = "2020-07-16" # Program Version Release Date:
Sheet1.cell(column = 2, row = 6).value = "CSE" # Program Name for Tables and Charts (short):
Sheet1.cell(column = 2, row = 7).value = "Big Ladder Software" # Modeler Organization:
Sheet1.cell(column = 2, row = 8).value = "BLS" # Modeler Organization for Tables and Charts (short):
Sheet1.cell(column = 2, row = 9).value = '{}'.format(datetime.now()) # Results Submission Date:

# Columns data for subhourly outputs for each test
columns = [
  {'Name': "Dry Bulb Temperature (C)", 'Frequency': "Subhourly", 'Column': 2},
  {'Name': "Relative Humidity (%)", 'Frequency': "Subhourly", 'Column': 3},
  {'Name': "Dewpoint Temperature (C)", 'Frequency': "Subhourly", 'Column': 4},
  {'Name': "Humidity Ratio (kg moisture/kg dry air)", 'Frequency': "Subhourly", 'Column': 5},
  {'Name': "Wet Bulb Temperature (C)", 'Frequency': "Subhourly", 'Column': 6},
  {'Name': "Windspeed (m/s)", 'Frequency': "Subhourly", 'Column': 7},
  {'Name': "Wind Direction (degrees from North)", 'Frequency': "Subhourly", 'Column': 8},
  {'Name': "Station Pressure (mbar)", 'Frequency': "Subhourly", 'Column': 9},
  {'Name': "Total Cloud Cover (tenths of sky)", 'Frequency': "Subhourly", 'Column': 10},
  {'Name': "Opaque Cloud Cover (tenths of sky)", 'Frequency': "Subhourly", 'Column': 11}, # output not generated by CSE
  {'Name': "Sky Temperature (C)", 'Frequency': "Subhourly", 'Column': 12},
  {'Name': "Total Horizontal Radiation (Wh/m2)", 'Frequency': "Subhourly", 'Column': 13},
  {'Name': "Beam Horizontal Radiation (Wh/m2)", 'Frequency': "Subhourly", 'Column': 14},
  {'Name': "Diffuse Horizontal Radiation (Wh/m2)", 'Frequency': "Subhourly", 'Column': 15},
  {'Name': "Total Radiation on S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 16},
  {'Name': "Total Beam Radiation on S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 17},
  {'Name': "Total Diffuse Radiation on S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 18},
  {'Name': "Total Radiation on E Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 19},
  {'Name': "Total Beam Radiation on E Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 20},
  {'Name': "Total Diffuse Radiation on E Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 21},
  {'Name': "Total Radiation on N Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 22},
  {'Name': "Total Beam Radiation on N Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 23},
  {'Name': "Total Diffuse Radiation on N Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 24},
  {'Name': "Total Radiation on W Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 25},
  {'Name': "Total Beam Radiation on W Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 26},
  {'Name': "Total Diffuse Radiation on W Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 27},
  {'Name': "Total Radiation on 45° E of S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 28},
  {'Name': "Total Beam Radiation on 45° E of S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 29},
  {'Name': "Total Diffuse Radiation on 45° E of S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 30},
  {'Name': "Total Radiation on 45° W of S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 31},
  {'Name': "Total Beam Radiation on 45° W of S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 32},
  {'Name': "Total Diffuse Radiation on 45° W of S Azimuth and 90° Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 33},
  {'Name': "Total Radiation on E Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 34},
  {'Name': "Total Beam Radiation on E Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 35},
  {'Name': "Total Diffuse Radiation on E Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 36},
  {'Name': "Total Radiation on S Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 37},
  {'Name': "Total Beam Radiation on S Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 38},
  {'Name': "Total Diffuse Radiation on S Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 39},
  {'Name': "Total Radiation on W Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 40},
  {'Name': "Total Beam Radiation on W Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 41},
  {'Name': "Total Diffuse Radiation on W Azimuth and 30° from H Slope (Wh/m2)", 'Frequency': "Subhourly", 'Column': 42}
]

columns_to_skip = ["Opaque Cloud Cover (tenths of sky)"]

# add empty rows for subhourly outputs
timestep = 0.1 # hourly length of subhourly timesteps used by tool

print("Adding time of day for subhourly outputs ...")

subhourly_row_beg = 3 # First row for outputs

print("Processing case: ")

for case in cases:
  Sheet_case = wb[case]
  print("  " + case)
  i = 0
  for subhour in np.arange(timestep, 8760 + timestep, timestep):
    Sheet_case.cell(column = 1, row = subhourly_row_beg + i).value = subhour
    i += 1

  row  = subhourly_row_beg
  df_hourly = pd.read_csv('../../output/' + tests + '/' + case + '/HOURLY.csv')
  df_subhourly = pd.read_csv('../../output/' + tests + '/' + case + '/SUBHOURLY.csv')

  for column in columns:
    output = column['Name']
    target_column = column['Column']
    if output not in columns_to_skip:
      print("  Processing output: " + output)
      print("  Target column: " + str(target_column))
      if column['Frequency'] == "Hourly":
        # Hourly Outputs (the ones that can't be generated at subhourly frequency by CSE)
        hourly_row_beg = subhourly_row_beg + (1/timestep) - 1
        s_hour = df_hourly[output]
        for index, value in s_hour.items():
          row_i = hourly_row_beg + (index/timestep)
          Sheet_case.cell(column = target_column, row = row_i).value = value
      elif column['Frequency'] == "Subhourly":
        # Subhourly Outputs (remaining outputs that)
        s_subhour = df_subhourly[output]
        for index, value in s_subhour.items():
          row_i = subhourly_row_beg + index
          Sheet_case.cell(column = target_column, row = row_i).value = value
    else:
      print("  Skipping output: " + output)
      print("  Skipping column: " + str(target_column))


print("Done processing cases.")
print("Writing results to XLSX ...")

wb.save(filename='../../reports/' + tests + '/WeatherDriversResultsSubmittal_CSE.xlsx')

print("Writing notes to TXT ...")
with open('../../reports/' + tests + '/S140outNotes-Template.txt','r') as notes_template:
  content = notes_template.read()

with open('../../reports/' + tests + '/S140outNotes_CSE.txt','w') as notes:
  notes.write(mk.Template(content).render(version=version))

print("Done")
