
Documentation for Params:


Params is a command-line tool for generating text files from a set of templates and parametric inputs.

For example, Params can be used to automatically generate input files and perform parametric analyses for the EnergyPlus building energy simulation program.

Params is designed to be a replacement for older text processing programs such as EPMacro.


To get a list of allowable commands, type 'params' at the command prompt.

NOTE: Not all commands are functional yet.


The most important command is 'compose'. To see the correct syntax for 'compose', type 'params help compose' at the command prompt.


compose [command options] [template path]
    Compose a template with parameter values and files.

Command Options:
    -a                   - Return absolute paths
    -d, --dirs=arg       - Search directory paths
    -f, --files=arg      - Apply parameter files
    -o, --output=arg     - Output path (default: filename.out)
    -p, --parameters=arg - Apply parameter values
    -q                   - Return double-quoted paths


For example, try this with simple.idf in the 'examples' directory:

  params compose simple.idf

Params should write out a file called simple.out with all default parameters filled in.


simple.idf is called a template file. Templates are plain text files that are marked up with embedded Ruby to insert parameter values, insert sub templates, and generate dynamic content.
Here is a brief overview of how to use embedded Ruby: http://en.wikipedia.org/wiki/ERuby

If the template file accepts any parameter inputs, there should be a special block at the top of the file like this:

<%#INITIALIZE

...parameter declarations

%>

The first line of the block must be written exactly as shown: <%#INITIALIZE

Parameter declarations are included in the initialize block like this:

<%#INITIALIZE
parameter "run_control", :default=>"ANNUAL"  # (ANNUAL | SIZING)
parameter "building_name", :default=>"Building"
parameter "orientation", :default=>0
%>

Once a parameter is declared, the associated variable name, e.g., "run_control", can be used in the body of the template inside of an embedded Ruby blocks.
A :default value is optional. If specified, the parameter is not required to be able to compose the template.
If no :default is set, the parameter is required. If not specified, the template will fail with an error when composed.

Comments can be placed anywhere after a hash character inside the initialize block.



To write out to a specific path, use the -o option:

  params compose -o output.idf simple.idf


To set parameter values from a file, use the -f option:

  params compose -o output.idf -f parameters.txt simple.idf

Params should write out the template with the values from parameters.txt inserted.
NOTE: The -p option is not yet implemented.

The syntax for parameter files is important and should be as follows:

:parameter1=>value1,  # comments can be placed anywhere after a hash character
:parameter2=>value2,
:parameter2=>value3

Parameter-value pairs can be on separate lines or the same line as long as they are separated by commas. The last pair should not have a comma after it.
Also note the colon preceding each parameter name and the "arrow" => assignment operator.


Templates can be nested inside each other using a Params-specific command called 'insert'.

See the nested.idf file for example and try the following:

  params compose nested.idf
