<%#INTERFACE
puts "in interface"
puts "still need to handle exceptions in interface"

parameter "needy"  # required
parameter "p1", :default=>99
parameter "p2", :default=>12
parameter "req_param", :default=>"not required"

outer_value = 42

condition :p1 => 99 do
  puts "in condition block"
  default :p1 => 11
  force :p2 => outer_value
  force :req_param => "charlie"
  #disable :p1, :p2
end

#condition do
#  default :p1 => 82
#end


# could also have post- blocks: code to run on the result text before it's actually output

%>

<%
puts "in body"
puts "p1=#{p1}"
puts "p2=#{p2}"


h = local(:p1, :p2)
puts h.inspect

puts __line__
x = 3
#console
#puts "x = #{x}"

#warn "This is a warning!"

if (x = 4)
  puts "in here"
end

#puts __line__
#puts caller
#puts caller_locations

#fail "This is an error"

#puts caller(0)

#console "2nd breakpoint"

insert_template "test3.pxt"

puts "resolve=>"
puts resolve_path("/abc/def.pxt")

# should be that absolute paths always work (as long as file exists), regardless of search dirs
# need to test
# would like to eliminate this line in path.rb: search_dirs = [nil] + dirs

a = 99


%>


CONTENT

req_param is <%= req_param %>

END
