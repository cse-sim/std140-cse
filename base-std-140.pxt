<%#INTERFACE
  parameter "case_name"
  parameter "weather_independent_infiltration_rate"
  parameter "adiabatic_floor"
%>

<%
# Unit Conversions
$m_ft = 3.28084
$m2_ft2 = $m_ft*$m_ft
$m3_ft3 = $m2_ft2*$m_ft
$kg_lbm = 2.20462
$h_min = 60.0
$min_s = 60.0
$h_s = $h_min  * $min_s
$k_c = 0.5781759824
$rho_c = 0.062428
$cp_c = 0.000239
$w_btuh = 3.412
$kw_btuh = $w_btuh * 1000
$kj_btu = 1 / 1.0556
$k_r = 9/5.0
$q_c = $w_btuh/$m2_ft2
$u_c = $q_c/$k_r

#Substance Properties
$standard_air_density = 0.075 # 0.075 lb/ft3
$latent_heat_of_evaporation_water = 1061 # 1061 btu/lb

def convert_celsius_to_fahrenheit(celsius)
  return celsius * 9/5.0 + 32.0
end

# Internal use
nsteps = 20
%>

<%
# Dimensions
length = 49.9110*$m_ft
width = 33.2738*$m_ft
$floor_height = 2.7432*$m_ft
$plenum_height = 1.2192*$m_ft

floor_area = length*width
floor_volume = floor_area*$floor_height
plenum_volume = floor_area*$plenum_height

corner_length = 4.5732*$m_ft

perimeter_ew_length = 24.1274*$m_ft
perimeter_ew_width = corner_length

perimeter_ns_length = 40.7643*$m_ft
perimeter_ns_width = corner_length

core_1_width = 18.7790*$m_ft
core_2_width = 10.9024*$m_ft
core_3_width = 11.0829*$m_ft

corner_area = corner_length * corner_length 
perimeter_ew_area = perimeter_ew_length * perimeter_ew_width
perimeter_ns_area = perimeter_ns_length * perimeter_ns_width
core_1_area = core_1_width * perimeter_ew_length
core_2_area = core_2_width * perimeter_ew_length
core_3_area = core_3_width * perimeter_ew_length

window_frame_area = 0.734* $m2_ft2 
$window_width = 2.486 * $m_ft
$window_height = 2.7432 * $m_ft
$window_area = $window_width * $window_height
$window_shgc = 0.39
$window_u_factor = 3.268 * $u_c
$frame_area_multiplier = 1 - (window_frame_area / $window_area)

door_width = 0.9144 * $m_ft
door_height = 2.1336 * $m_ft

$two_door_area = door_width * door_height * 2 # TODO: can two doors be combined into a single door with double area in DOOR object?

$occupant_power = 120.0*$w_btuh

$infrared_emittance	= 0.9
$window_infrared_emittance	= 0.84
$solar_absorptance = 0.7
$visible_absorptance = 0.7
$visible_absorptance_interior_floor = 0.8
$visible_absorptance_dropped_ceiling = 0.2

$rough_surface_value = 1.67

$footing_length = 0.76 * $m_ft
$footing_depth = 0.20 * $m_ft
%>

wfName = "weather/std-140/725650TY.epw"
nSubSteps = <%= nsteps %>
DT = No
bldgAzm = 0
elevation = <%= 1650 * $m_ft %> <% # TODO: is there a way to import the elevation from the weather file? %>

terrainClass = 3
wuDays = 30
skyModel = ANISOTROPIC
skyModelLW = BERDAHLMARTIN
hConvMod = No
jan1DoW = "FRI" // Jan 1 2021

// Soil

soilCond = <%= 1.90 * $k_c %>
soilDens = <%= 1490 * $rho_c %>
soilSpHt = <%= 1800 * $cp_c  %>
grndRefl = 0.20


// Materials
// Std140

MATERIAL "Roof Metal Deck"
  matCond = <%= 45.28*$k_c %>
  matDens = <%= 7824*$rho_c %>
  matSpHt = <%= 500*$cp_c %>

MATERIAL "Roof Insulation"
  matCond = <%= 0.020*$k_c %>
  matDens = <%= 32*$rho_c %>
  matSpHt = <%= 922*$cp_c %>

MATERIAL "Roof Built-Up Roofing"
  matCond = <%= 0.16*$k_c %>
  matDens = <%= 1120*$rho_c %>
  matSpHt = <%= 1460*$cp_c %>

MATERIAL "Exterior Wall Gypsum Board"
  matCond = <%= 0.16*$k_c %>
  matDens = <%= 800*$rho_c %>
  matSpHt = <%= 1090*$cp_c %>

MATERIAL "Exterior Wall Insulation"
  matCond = <%= 0.037*$k_c %>
  matDens = <%= 10*$rho_c %>
  matSpHt = <%= 838*$cp_c %>

MATERIAL "Exterior Wall Stucco"
  matCond = <%= 0.72*$k_c %>
  matDens = <%= 1856*$rho_c %>
  matSpHt = <%= 840*$cp_c %>

MATERIAL "Exterior Door Opaque Door"
  matCond = <%= 0.116*$k_c %>
  matDens = <%= 513*$rho_c %>
  matSpHt = <%= 1382*$cp_c %>

MATERIAL "Carpet"
  matCond = <%= 0.08*$k_c %>
  matDens = <%= 320*$rho_c %>
  matSpHt = <%= 1380*$cp_c %>

MATERIAL "Concrete"
  matCond = <%= 2.31*$k_c %>
  matDens = <%= 2322*$rho_c %>
  matSpHt = <%= 832*$cp_c %>

MATERIAL "Dropped Ceiling Acoustic Tile"
  matCond = <%= 0.057*$k_c %>
  matDens = <%= 288*$rho_c %>
  matSpHt = <%= 1339*$cp_c %>

MATERIAL "Adiabatic Insulation"
  matCond = <%= 0.01*$k_c %>

MATERIAL "Interior Wall Gypsum Board"
  matCond = <%= 0.16*$k_c %>
  matDens = <%= 800*$rho_c %>
  matSpHt = <%= 1089*$cp_c %>

MATERIAL "Interior Wall Insulation"
  matCond = <%= 0.12*$k_c %>
  matDens = <%= 512*$rho_c %>
  matSpHt = <%= 1383*$cp_c %>

MATERIAL "Furniture Wood"
  matCond = <%= 0.119*$k_c %>
  matDens = <%= 545*$rho_c %>
  matSpHt = <%= 1214*$cp_c %>


// Constructions
// Std 140

CONSTRUCTION "Roof"
  LAYER lrMat= "Roof Metal Deck" lrThk=<%= 0.0008*$m_ft %>
  LAYER lrMat= "Roof Insulation" lrThk=<%= 0.053*$m_ft %>
  LAYER lrMat= "Roof Built-Up Roofing" lrThk=<%= 0.0095*$m_ft %>

CONSTRUCTION "Exterior Wall"
  LAYER lrMat= "Exterior Wall Gypsum Board" lrThk=<%= 0.16*$m_ft %>
  LAYER lrMat= "Exterior Wall Insulation" lrThk=<%= 0.062*$m_ft %>
  LAYER lrMat= "Exterior Wall Gypsum Board" lrThk=<%= 0.16*$m_ft %>
  LAYER lrMat= "Exterior Wall Stucco" lrThk=<%= 0.72*$m_ft %>

CONSTRUCTION "Exterior Door"
  LAYER lrMat= "Exterior Door Opaque Door" lrThk=<%= 0.116*$m_ft %>

CONSTRUCTION "Interior Floor"
  LAYER lrMat= "Carpet" lrThk=<%= 0.08*$m_ft %>
  LAYER lrMat= "Concrete" lrThk=<%= 2.31*$m_ft %>

CONSTRUCTION "Dropped Ceiling"
  LAYER lrMat= "Dropped Ceiling Acoustic Tile" lrThk=<%= 0.08*$m_ft %>

CONSTRUCTION "Slab-On-Grade Adiabatic"
  LAYER lrMat= "Carpet" lrThk=<%= 0.0173*$m_ft %>
  LAYER lrMat= "Concrete" lrThk=<%= 0.20*$m_ft %>
  LAYER lrMat= "Adiabatic Insulation" lrThk=<%= 1.000*$m_ft %>

CONSTRUCTION "Slab-On-Grade Non-Adiabatic"
  LAYER lrMat= "Carpet" lrThk=<%= 0.0173*$m_ft %>
  LAYER lrMat= "Concrete" lrThk=<%= 0.20*$m_ft %>

CONSTRUCTION "Interior Wall"
  LAYER lrMat= "Interior Wall Gypsum Board" lrThk=<%= 0.0127*$m_ft %>
  LAYER lrMat= "Interior Wall Insulation" lrThk=<%= 0.0889*$m_ft %>
  LAYER lrMat= "Interior Wall Gypsum Board" lrThk=<%= 0.0127*$m_ft %>

CONSTRUCTION "Furniture"
  LAYER lrMat= "Furniture Wood" lrThk=<%= 0.15*$m_ft %>

CONSTRUCTION "Foundation Wall"
  LAYER lrMat= "Concrete" lrThk=<%= 0.20*$m_ft %>

FOUNDATION "Foundation"
  fdWlCon = "Foundation Wall"
  fdWlHtAbvGrd = 0
  fdWlDpBlwSlb = <%= 0.87 * $m_ft %>

FNDBLOCK "Footing"
  fbMat = "Concrete"
  fbX1Ref = "WALLCENTER"
  fbZ1Ref = "WALLBOTTOM"
  fbX1 =  <%= -$footing_length / 2 %>
  fbX2 = <%= $footing_length / 2 %>
  fbZ2 = <%= $footing_depth %>

<%
# Zones

def convert_list(list, multiplier)
new_list = []
  for element in list
    new_list.push(element * multiplier)
  end
return new_list
end

floors = ["Bottom","Middle","Top"]

zones = [
  {
    :name => "Corner_Northwest", 
    :area => corner_area,
    :exposed_perimeter => corner_length * 2,
    :internal_partition_surface_area => 0,
    :internal_mass_surface_area => 41.8 * $m2_ft2,
    :ach4 => 2.41,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [11.0,15.0,15.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([6.14,8.61,8.61], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([13.99,15.07,15.07], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Exterior_North",
        :azimuth => 0,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      },
      {
        :name => "Perimeter_North",
        :azimuth => 90,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Perimeter_West",
        :azimuth => 180,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Exterior_West",
        :azimuth => 270,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      }
    ]
  },
  {
    :name => "Perimeter_North",
    :area => perimeter_ns_area,
    :exposed_perimeter => perimeter_ns_length,
    :internal_partition_surface_area => 150.367 * $m2_ft2,
    :internal_mass_surface_area => 372.9 * $m2_ft2,
    :ach4 => 1.20,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [10.0,10.0,10.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([7.1,7.53,7.53], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([11.84,11.84,11.84], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Exterior_North",
        :azimuth => 0,
        :surface_area => perimeter_ns_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 7
      },
      {
        :name => "Corner_Northeast",
        :azimuth => 90,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Core_3",
        :azimuth => 180,
        :surface_area => core_3_width * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Core_2",
        :azimuth => 180,
        :surface_area => core_2_width * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Core_1",
        :azimuth => 180,
        :surface_area => core_1_width * $floor_height,
        :surface_facing_type => "Interior"
      },
    ]
  },
  {
    :name => "Corner_Northeast",
    :area => corner_area,
    :exposed_perimeter => corner_length * 2,
    :internal_partition_surface_area => 0,
    :internal_mass_surface_area => 41.8 * $m2_ft2,
    :ach4 => 2.41,
    :occupancy_schedule => ["B","B","B"],
    :occupancy => [5.0,5.0,5.0],
    :lighting_schedule => ["F","F","F"],
    :lighting_power_density => convert_list([3.66,3.66,3.66], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["J","J","J"],
    :plug_load_power_density => convert_list([9.69,9.69,9.69], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Exterior_North",
        :azimuth => 0,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      },
      {
        :name => "Exterior_East",
        :azimuth => 90,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      },
      {
        :name => "Perimeter_East",
        :azimuth => 180,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
    ]
  },
  {
    :name => "Perimeter_West",
    :area => perimeter_ew_area,
    :exposed_perimeter => perimeter_ew_length,
    :internal_partition_surface_area => 0,
    :internal_mass_surface_area => 41.8 * $m2_ft2,
    :ach4 => 1.20,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [59.0,6.0,6.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([6.14,7.53,7.53], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([13.99,11.84,11.84], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Core_1",
        :azimuth => 90,
        :surface_area => perimeter_ew_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Corner_Southwest",
        :azimuth => 180,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Exterior_West",
        :azimuth => 270,
        :surface_area => perimeter_ew_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 4
      }
    ]
  },
  {
    :name => "Core_1",
    :area => core_1_area,
    :exposed_perimeter => 0,
    :internal_partition_surface_area => 161.054 * $m2_ft2,
    :internal_mass_surface_area => 906.3 * $m2_ft2,
    :ach4 => 0,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [24.0,24.0,24.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([7.1,7.1,7.1], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([11.84,11.84,11.84], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Core_2",
        :azimuth => 90,
        :surface_area => perimeter_ew_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Perimeter_South",
        :azimuth => 180,
        :surface_area => core_1_width * $floor_height,
        :surface_facing_type => "Interior"
      },
    ]
  },
  {
    :name => "Core_2",
    :area => core_2_area,
    :exposed_perimeter => 0,
    :internal_partition_surface_area => 139.473 * $m2_ft2,
    :internal_mass_surface_area => 526.3 * $m2_ft2,
    :ach4 => 0,
    :occupancy_schedule => ["C","C","C"],
    :occupancy => [0.0,0.0,0.0],
    :lighting_schedule => ["G","G","G"],
    :lighting_power_density => convert_list([1.51,1.51,1.51], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["K","K","K"],
    :plug_load_power_density => convert_list([7.64,7.64,7.64], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Core_3",
        :azimuth => 90,
        :surface_area => perimeter_ew_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Perimeter_South",
        :azimuth => 180,
        :surface_area => core_2_width * $floor_height,
        :surface_facing_type => "Interior"
      },
    ]
  },
  {
    :name => "Core_3",
    :area => core_3_area,
    :exposed_perimeter => 0,
    :internal_partition_surface_area => 139.967 * $m2_ft2,
    :internal_mass_surface_area => 534.8 * $m2_ft2,
    :ach4 => 0,
    :occupancy_schedule => ["D","D","D"],
    :occupancy => [25.0,25.0,25.0],
    :lighting_schedule => ["H","H","H"],
    :lighting_power_density => convert_list([1.29,1.29,1.29], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["L","L","L"],
    :plug_load_power_density => convert_list([10.55,10.55,10.55], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Perimeter_East",
        :azimuth => 90,
        :surface_area => perimeter_ew_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Perimeter_South",
        :azimuth => 180,
        :surface_area => core_3_width * $floor_height,
        :surface_facing_type => "Interior"
      },
    ]
  },
  {
    :name => "Perimeter_East",
    :area => perimeter_ew_area,
    :exposed_perimeter => perimeter_ew_length,
    :internal_partition_surface_area => 75.188 * $m2_ft2,
    :internal_mass_surface_area => 220.7 * $m2_ft2,
    :ach4 => 1.20,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [6.0,6.0,6.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([7.53,7.53,7.53], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([11.84,11.84,11.84], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Exterior_East",
        :azimuth => 90,
        :surface_area => perimeter_ew_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 4
      },
      {
        :name => "Corner_Southeast",
        :azimuth => 180,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
    ]
  },
  {
    :name => "Corner_Southwest", 
    :area => corner_area,
    :exposed_perimeter => corner_length * 2,
    :internal_partition_surface_area => 0,
    :internal_mass_surface_area => 41.8 * $m2_ft2,
    :ach4 => 2.41,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [11.0,11.0,11.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([6.14,6.14,6.14], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([13.99,13.99,13.99], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Perimeter_South",
        :azimuth => 90,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Exterior_South",
        :azimuth => 180,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      },
      {
        :name => "Exterior_West",
        :azimuth => 270,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      }
    ]
  },
  {
    :name => "Perimeter_South",
    :area => perimeter_ns_area,
    :exposed_perimeter => perimeter_ns_length,
    :internal_partition_surface_area => 150.367 * $m2_ft2,
    :internal_mass_surface_area => 372.9 * $m2_ft2,
    :ach4 => 1.20,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [10.0,10.0,10.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([7.1,7.1,7.1], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([11.84,11.84,11.84], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Corner_Southeast",
        :azimuth => 90,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Interior"
      },
      {
        :name => "Exterior_South",
        :azimuth => 180,
        :surface_area => perimeter_ns_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 7
      },
    ]
  },
  {
    :name => "Corner_Southeast", 
    :area => corner_area,
    :exposed_perimeter => corner_length * 2,
    :internal_partition_surface_area => 0,
    :internal_mass_surface_area => 41.8 * $m2_ft2,
    :ach4 => 2.41,
    :occupancy_schedule => ["A","A","A"],
    :occupancy => [11.0,11.0,11.0],
    :lighting_schedule => ["E","E","E"],
    :lighting_power_density => convert_list([6.14,6.14,6.14], $w_btuh / $m2_ft2),
    :plug_load_schedule => ["I","I","I"],
    :plug_load_power_density => convert_list([13.99,13.99,13.99], $w_btuh / $m2_ft2),
    :infiltration_schedule => "N1",
    :ventilation_schedule => "M1",
    :people_outdoor_air_rate => convert_list([8.5,8.5,8.5], $m3_ft3),
    :area_outdoor_air_rate => convert_list([1.10,1.10,1.10], $m_ft),
    :surfaces => [
      {
        :name => "Exterior_East",
        :azimuth => 90,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      },
      {
        :name => "Exterior_South",
        :azimuth => 180,
        :surface_area => corner_length * $floor_height,
        :surface_facing_type => "Exterior",
        :number_windows => 1
      },
    ]
  },
  {
    :name => "Plenum", 
    :area => floor_area,
    :ach4 => 0.55,
    :infiltration_schedule => "N2",
    :surfaces => [
      {
        :name => "Exterior_North",
        :azimuth => 0,
        :surface_area => length * $plenum_height,
        :surface_facing_type => "Exterior"
      },
      {
        :name => "Exterior_East",
        :azimuth => 90,
        :surface_area => width * $plenum_height,
        :surface_facing_type => "Exterior",
      },
      {
        :name => "Exterior_South",
        :azimuth => 180,
        :surface_area => length * $plenum_height,
        :surface_facing_type => "Exterior",
      },
      {
        :name => "Exterior_West",
        :azimuth => 270,
        :surface_area => width * $plenum_height,
        :surface_facing_type => "Exterior"
      }
    ]
  },
]

%>

<% def set_common_surface_variables() %>
  sfExAbs = <%= $solar_absorptance %>
  sfInAbs = <%= $solar_absorptance %>
  sfExEpsLW = <%= $infrared_emittance %>
  sfInEpsLW = <%= $infrared_emittance %>
  sfExRf = <%= $rough_surface_value %>
<% end %>

<% def set_occupancy_schedule(occupancy_schedule)
  if occupancy_schedule == "A"
    return "select($ISWEEKEND,0,default hourval(0,0,0,0,0,0,0,0.25,0.50,0.90,0.90,0.90,0.75,0.75,0.90,0.90,0.90,0.50,0.25,0,0,0,0,0))"
  elsif occupancy_schedule == "B"
    return "select($ISWEEKEND,0,default hourval(0,0,0,0,0,0,0,0,0,0,0,0.25,0.90,0.90,0.75,0,0,0,0,0,0,0,0,0))"
  elsif occupancy_schedule == "C"
    return "select($ISWEEKEND,0,default hourval(0,0,0,0,0,0,0,0.20,0.41,0.73,0.73,0.73,0.61,0.61,0.73,0.73,0.73,0.41,0.20,0,0,0,0,0))"
  else # occupancy schedule "D"
    return "select($ISWEEKEND,0,default hourval(0,0,0,0,0,0,0,0.20,0.47,0.78,0.78,0.78,0.66,0.66,0.78,0.78,0.78,0.47,0.20,0,0,0,0,0))"
  end
end

def set_lighting_schedule(lighting_schedule)
  if lighting_schedule == "E"
    return "select($ISWEEKEND,hourval(0.05,0.05,0.05,0.05,0.05,0.05,0.10,0.10,0.30,0.30,0.30,0.30,0.15,0.15,0.15,0.15,0.15,0.05,0.05,0.05,0.05,0.05,0.05,0.05),default hourval(0.05,0.05,0.05,0.05,0.05,0.10,0.10,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.30,0.20,0.20,0.10,0.05))"
  elsif lighting_schedule == "F"
    return "select($ISWEEKEND,hourval(0.05,0.05,0.05,0.05,0.05,0.05,0.10,0.10,0.30,0.30,0.30,0.30,0.15,0.15,0.15,0.15,0.15,0.05,0.05,0.05,0.05,0.05,0.05,0.05),default hourval(0.05,0.05,0.05,0.05,0.05,0.10,0.10,0.10,0.10,0.10,0.10,0.90,0.90,0.90,0.90,0.30,0.30,0.30,0.30,0.30,0.20,0.20,0.10,0.05))"
  elsif lighting_schedule == "G"
    return "select($ISWEEKEND,hourval(0.04,0.04,0.04,0.04,0.04,0.04,0.08,0.10,0.30,0.30,0.30,0.30,0.15,0.15,0.15,0.15,0.15,0.05,0.05,0.04,0.04,0.04,0.04,0.04),default hourval(0.04,0.04,0.04,0.04,0.04,0.08,0.08,0.54,0.54,0.54,0.54,0.54,0.54,0.54,0.54,0.54,0.54,0.54,0.54,0.24,0.16,0.16,0.08,0.04))"
  else # occupancy schedule "H"
    return "select($ISWEEKEND,hourval(0.05,0.05,0.05,0.05,0.05,0.05,0.10,0.10,0.30,0.30,0.30,0.30,0.15,0.15,0.15,0.15,0.15,0.05,0.05,0.05,0.05,0.05,0.05,0.05),default hourval(0.05,0.05,0.05,0.05,0.05,0.10,0.10,0.55,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.55,0.30,0.20,0.20,0.10,0.05))"
  end
end

def set_plug_load_schedule(plug_load_schedule)
  if plug_load_schedule == "I"
    return "select($ISWEEKEND,hourval(0.23,0.23,0.23,0.23,0.23,0.23,0.38,0.38,0.48,0.48,0.48,0.48,0.33,0.33,0.33,0.33,0.33,0.29,0.29,0.23,0.23,0.23,0.23,0.23),default hourval(0.31,0.31,0.31,0.31,0.31,0.31,0.38,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.38,0.38,0.38,0.38))"
  elsif plug_load_schedule == "J"
    return "select($ISWEEKEND,hourval(0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07),default hourval(0.07,0.07,0.07,0.07,0.07,0.07,0.30,0.77,0.90,0.90,0.90,0.90,0.90,0.90,0.77,0.30,0.30,0.77,0.90,0.90,0.90,0.90,0.77,0.30))"
  elsif plug_load_schedule == "K"
    return "select($ISWEEKEND,hourval(0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.06,0.06,0.06,0.06,0.06,0.06,0.06),default hourval(0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.06,0.06,0.06,0.06))"
  else # occupancy schedule "L"
    return "select($ISWEEKEND,hourval(0.09,0.09,0.09,0.09,0.09,0.09,0.14,0.14,0.17,0.17,0.17,0.17,0.12,0.12,0.12,0.12,0.12,0.11,0.11,0.09,0.09,0.09,0.09,0.09),default hourval(0.14,0.14,0.14,0.14,0.14,0.14,0.16,0.16,0.35,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.90,0.38,0.20,0.20,0.16,0.16,0.16,0.16))"
  end
end 

def set_ventilation_schedule(ventilation_schedule)
  if ventilation_schedule == "M1"
    return "select($ISWEEKEND, 0, default hourval(0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0))"
  else # ventilation schedule "M2"
    return "hourval(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)"
  end
end


def set_infiltration_schedule(infiltration_schedule)
  if infiltration_schedule == "N1"
    return "select($ISWEEKEND, hourval(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1), default hourval(1,1,1,1,1,1,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,1,1))"
  elsif infiltration_schedule == "N2"
    return "hourval(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)"
  else # infiltration schedule "N3"
    return "hourval(0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25)"
  end
end

def set_cooling_schedule(cooling_schedule)
  if cooling_schedule == "O"
    return "select($ISWEEKEND, hourval(26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67,26.67), default hourval(26.67,26.67,26.67,26.67,26.67,26.67,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,26.67,26.67))"
  else # cooling schedule "P"
    return "hourval(23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89,23.89)"
  end
end

def set_heating_schedule(heating_schedule)
  if heating_schedule == "Q"
    return "select($ISWEEKEND, hourval(15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56,15.56), default hourval(15.56,15.56,15.56,15.56,15.56,15.56,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,15.56,15.56))"
  else # heating schedule "R"
    return "hourval(21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11,21.11)"
  end
end

def set_heating_and_cooling_schedules_and_capacities(zone_name)
  if zone_name == "Core_2"
    cooling_schedule = "P"
    heating_schedule = "R"
  else # non-Core_2 zones; Plenum schedules are set, but are not used
    cooling_schedule = "O"
    heating_schedule = "Q"
  end

  if zone_name != "Plenum" # non-plenum zones %>
    znTC = <%= 9.0/5.0 %> * <%= set_cooling_schedule(cooling_schedule) %> + <%= 32.0 %>
    znTH = <%= 9.0/5.0 %> * <%= set_heating_schedule(heating_schedule) %> + <%= 32.0 %>
    znQMxC = <%= -1000000000 * $w_btuh %>
    znQMxH = <%= 1000000000 * $w_btuh %>
  <% end
end %>

<% def get_zone_height(zone_name)
  if zone_name == "Plenum"
    return $plenum_height
  else # non-plenum floor height
    return $floor_height
  end
end

def create_surface_name(zone_floor_name, adjacent_zone_name)
  zones = [zone_floor_name, adjacent_zone_name].sort
  return "#{zones[0]}_#{zones[1]}"
end

def get_ceiling_height(floor)
  return ($floor_height * floor) + ($plenum_height * (floor - 1))
end

def get_floor_height(floor)
  return ($floor_height + $plenum_height) * (floor-1)
end

def set_zone_volume_and_height_dimensions(zone,floor)
  if zone[:name] == "Plenum" %>
    znVol = <%= zone[:area] * $plenum_height %>
    znCeilingHt = <%= ($floor_height + $plenum_height) * floor  %>
    znFloorZ = <%= ($floor_height * floor) + ($plenum_height * (floor - 1)) %>
  <% else %>
    znVol = <%= zone[:area] * $floor_height %>
    znCeilingHt = <%= get_ceiling_height(floor) %>
    znFloorZ = <%= get_floor_height(floor) %>
  <% end
end

def add_exfiltration_izxfer(zone_floor_name, zone_floor_area, flow_rate) %>
  IZXFER <%= "#{zone_floor_name}_Exfiltration" %>
    izNVType = AIRNETEXT
    izAFCat = InfilEx
    izZn1 = <%= zone_floor_name %>
    izALo = <%= flow_rate * zone_floor_area %>
<% end

def convert_ach4_to_ach50(ach4, hr)
  # ach50 = 19.2 * ach4 / (wsf * (H/Hr)0.4) [for n = 0.65]
  h = 8.202
  wsf = 0.59
  return 19.2 * ach4 / (wsf * (h/hr)**0.4)
end

for zone in zones
  zone_name = zone[:name]
  zone_height = get_zone_height(zone_name)
  if zone_name != "Plenum"
    floors.each_with_index do |floor_name, floor_index|
      floor = floor_index + 1
      zone_floor_name = "#{floor_name}_#{zone_name}"
      zone_floor_area = zone[:area]
      zone_floor_volume = zone_floor_area * zone_height
      ach4 = zone[:ach4]
      cfm4 = ach4 * zone_floor_volume / $h_min
      ach50 = convert_ach4_to_ach50(ach4, zone_height)
      occupancy = zone[:occupancy][floor_index]
      infiltration_schedule = zone[:infiltration_schedule]
      ventilation_schedule = zone[:ventilation_schedule]
      people_outdoor_air_rate = zone[:people_outdoor_air_rate][floor_index]
      area_outdoor_air_rate = zone[:area_outdoor_air_rate][floor_index]
      flow_rate = (1 / $h_min) * (occupancy * people_outdoor_air_rate + zone_floor_area * area_outdoor_air_rate) %>

      IZXFER <%= "#{zone_floor_name}_Ventilation" %>
        izNVType = AIRNETEXTFLOW
        izAFCat = FanEx
        izZn1 = <%= zone_floor_name %>
        izVfMin = <%= flow_rate %> * <%= set_ventilation_schedule(ventilation_schedule) %>
<% 
      if weather_independent_infiltration_rate
        add_exfiltration_izxfer(zone_floor_name, zone_floor_area, flow_rate) %>
        IZXFER <%= "#{zone_floor_name}_Constant_Infiltration" %>
          izNVType = AIRNETEXTFLOW
          izAFCat = InfilEx
          izZn1 = <%= zone_floor_name %>
          izVfMin = <%= cfm4 %> * <%= set_infiltration_schedule(infiltration_schedule) %>
<%
      else
        if ach4 == 0
          add_exfiltration_izxfer(zone_floor_name, zone_floor_area, flow_rate)
        else
          insert 'infiltration.cse.pxt',
          :zone_name=>zone_floor_name,
          :leakage_area=>ach50*zone_floor_volume*0.00000917,
          :zone_bottom_height=>get_floor_height(floor),
          :zone_height=>get_ceiling_height(floor) %>
<%
        end
      end
    end
  else # zone_name == Plenum
    floors.each_with_index do |floor_name, floor_index|
      floor = floor_index + 1
      zone_floor_name = "#{floor_name}_#{zone_name}"
      zone_floor_area = zone[:area]
      zone_floor_volume = zone_floor_area * zone_height
      ach4 = zone[:ach4]
      cfm4 = ach4 * zone_floor_volume / $h_min
      ach50 = convert_ach4_to_ach50(ach4, zone_height)
      infiltration_schedule = zone[:infiltration_schedule]
      if weather_independent_infiltration_rate
        add_exfiltration_izxfer(zone_floor_name, zone_floor_area, 10) %>
        IZXFER <%= "#{zone_floor_name}_Constant_Infiltration" %>
          izNVType = AIRNETEXTFLOW
          izAFCat = InfilEx
          izZn1 = <%= zone_floor_name %>
          izVfMin = <%= cfm4 %> * <%= set_infiltration_schedule(infiltration_schedule) %>
<%
      else
        insert 'infiltration.cse.pxt',
        :zone_name=>zone_floor_name,
        :leakage_area=>ach50*zone_floor_volume*0.00000917,
        :zone_bottom_height=>get_floor_height(floor),
        :zone_height=>get_ceiling_height(floor) %>
<%
      end
    end
  end
end

for zone in zones
  floors.each_with_index do |floor_name, floor_index|
    floor = floor_index + 1
    zone_name = zone[:name]
    zone_floor_name = "#{floor_name}_#{zone_name}"
    zone_floor_area = zone[:area]
    zone_height = get_zone_height(zone_name)
    zone_floor_lighting_meter = "MtrLighting_#{zone_floor_name}"
    zone_floor_plug_load_meter = "MtrPlugLoad_#{zone_floor_name}"
    zone_afmeter = "AFMETER_#{zone_floor_name}" %>
    METER <%= zone_floor_lighting_meter %>
    METER <%= zone_floor_plug_load_meter %>
    AFMETER "<%= zone_afmeter %>"

    <% if zone_name == "Plenum" # Add plenum zones %>

      ZONE <%= zone_floor_name %>
        znModel = "UZM"
        znArea = <%= zone_floor_area %>
        infAC = 0
        znCAir = <%= 0.24*0.077*zone_floor_area*zone_height %>
        znHcAirX = 0
        infShld = 1 // No obstructions or local shielding
        znAFMtr = "<%= zone_afmeter %>"

        <% set_zone_volume_and_height_dimensions(zone,floor) %>
      <% if floor == 3 %>
        SURFACE <%= create_surface_name(zone_floor_name, "Roof") %>
          sfType = "CEILING"
          sfArea = <%= floor_area %>
          sfExCnd = "AMBIENT"
          sfCon = "Roof"
          sfModel = "FORWARD_DIFFERENCE"
        <% set_common_surface_variables() %>
      <% end %>
        <% for surface in zone[:surfaces] # Add wall surfaces %>
        <% adjacent_zone_name = "#{floor_name}_#{surface[:name]}" %>
        SURFACE <%= create_surface_name(zone_floor_name, adjacent_zone_name) %>
          sfType = <%= "WALL" %>
          sfArea = <%= surface[:surface_area] %>
          sfAzm = <%= surface[:azimuth] %>

          <% if surface[:surface_facing_type] == "Interior" %>
            sfExCnd = "ADJZN"
            sfAdjZn = <%= adjacent_zone_name %>
            sfCon = "Interior Wall"
            sfModel = FORWARD_DIFFERENCE
            <% set_common_surface_variables() %>
          <% else # Exterior wall surface %> 
            sfExCnd = "AMBIENT"
            sfCon = "Exterior Wall"
            sfModel = FORWARD_DIFFERENCE
            <% set_common_surface_variables() %>
          <% end %>
        <% end %>
    <% else # Add non-plenum zones

      exposed_perimeter = zone[:exposed_perimeter]
      internal_partition_surface_area = zone[:internal_partition_surface_area]
      internal_mass_surface_area = zone[:internal_mass_surface_area]
      occupancy_schedule = zone[:occupancy_schedule][floor_index]
      occupancy = zone[:occupancy][floor_index]
      lighting_schedule = zone[:lighting_schedule][floor_index] 
      lighting_power_density = zone[:lighting_power_density][floor_index]
      plug_load_schedule = zone[:plug_load_schedule][floor_index]
      plug_load_power_density = zone[:plug_load_power_density][floor_index]
      ventilation_schedule = zone[:ventilation_schedule]
      people_outdoor_air_rate = zone[:people_outdoor_air_rate][floor_index]
      area_outdoor_air_rate = zone[:area_outdoor_air_rate][floor_index] %>

      ZONE <%= zone_floor_name %>
        znModel = "CZM"
        znArea = <%= zone_floor_area %>
        <% # TODO: is infiltration adjusted for elevation/air density in CSE? If not, the formula in section X.2.1.6.1 must be applied %>
        <% # TODO: review infiltration inputs %>
        infAC = 0
        <% set_heating_and_cooling_schedules_and_capacities(zone_name) %>
        znCAir = <%= 0.24*0.077*zone_floor_area*get_zone_height(zone_name) %>
        infShld = 1 // No obstructions or local shielding
        znAFMtr = "<%= zone_afmeter %>"
        <% # number of people × people outdoor air rate + floor area × area outdoor air rate. %>
        <% # TODO: ventilation should be calculated accoridng to 140-2023 Informative Annex B3 %>
        <% set_zone_volume_and_height_dimensions(zone,floor) %>
      <% if internal_partition_surface_area > 0 # internal partition surface %>
    SURFACE <%= "#{zone_floor_name}_Internal_Partition" %>
          sfType = "WALL" 
          sfCon = "Interior Wall"
          sfArea = <%= internal_partition_surface_area %>
          sfAzm = 0 // TODO: is this important for internal walls?
          sfExCnd = "ADJZN"
          sfAdjZn = <%= zone_floor_name %>
          sfModel = FORWARD_DIFFERENCE
      <% end %>
      <% if internal_mass_surface_area > 0 # interal mass surface %>
        SURFACE <%= "#{zone_floor_name}_Internal_Mass" %> // TODO: is it appropriate to create a surface for internal mass?
          sfType = "WALL" 
          sfCon = "Furniture"
          sfArea = <%= internal_mass_surface_area %>
          sfAzm = 0 // TODO: is this important for internal mass?
          sfExCnd = "ADJZN"
          sfAdjZn = <%= zone_floor_name %>
          sfModel = FORWARD_DIFFERENCE
      <% end %>
      <% # Set gains for occupancy, lighting, and plug loads %>
      GAIN <%= "OccupancySchedule" + occupancy_schedule %> 
        gnPower = <%= $occupant_power * occupancy %> * <%= set_occupancy_schedule(occupancy_schedule) %>
        gnFrRad = 0.50
        gnFrLat = 0.45
      GAIN <%= "LightingSchedule" + lighting_schedule %> 
        gnPower = <%= lighting_power_density * zone_floor_area %> * <%= set_lighting_schedule(lighting_schedule) %>
        gnFrRad = 0.70
        gnFrLat = 0
        gnEndUse = LIT
        gnMeter = <%= zone_floor_lighting_meter %>
      GAIN <%= "PlugLoadSchedule" + plug_load_schedule %> 
        gnPower = <%= plug_load_power_density * zone_floor_area %> * <%= set_plug_load_schedule(plug_load_schedule) %>
        gnFrRad = 0.50
        gnFrLat = 0
        gnEndUse = RCP
        gnMeter = <%= zone_floor_plug_load_meter %>
      <% for surface in zone[:surfaces] # Add non-plenum adjacent surfaces %>
      <% adjacent_zone_name = "#{floor_name}_#{surface[:name]}" %>
      SURFACE <%= create_surface_name(zone_floor_name, adjacent_zone_name) %>
        sfType = <%= "WALL" %>
        sfArea = <%= surface[:surface_area] %>
        sfAzm = <%= surface[:azimuth] %>

        <% if surface[:surface_facing_type] == "Interior" # Add non-plenum zone interior surfaces %>
          sfExCnd = "ADJZN"
          sfAdjZn = <%= adjacent_zone_name %>
          sfCon = "Interior Wall"
          sfModel = FORWARD_DIFFERENCE
          <% set_common_surface_variables() %>
        <% else # Add non-plenum zone exterior surfaces %> 
          sfExCnd = "AMBIENT"
          sfCon = "Exterior Wall"
          sfModel = FORWARD_DIFFERENCE
          <% set_common_surface_variables() %>
          WINDOW <%= "Window_#{zone_floor_name}" %>
            wnHeight = <%= $window_height %>
            wnWidth = <%= $window_width %>
            wnMult = <%= surface[:number_windows] %>
            wnU = <%= 3.268 * $u_c %>
            wnSHGC = <%= $window_shgc %>
            wnModel = "ASHWAT"
            wnNGlz = 2
            wnExShd = NONE
            wnInShd = NONE
            wnUNFRC = <%= $window_u_factor %>
            wnExEpsLW = <%= $window_infrared_emittance %>
            wnInEpsLW = <%= $window_infrared_emittance %>
            wnFMult = <%= $frame_area_multiplier %>
        <% end %> 
          
          <% if floor == 1 && if (zone_name == "Perimeter_North" || zone_name == "Perimeter_South") %> 
          DOOR <%= zone_floor_name %>
            drArea = <%= $two_door_area %>
            drModel = "FORWARD_DIFFERENCE"
            drCon = "Exterior Door"
            drExAbs = <%= $solar_absorptance %>
            drInAbs = <%= $solar_absorptance %>
            drExEpsLW = <%= $infrared_emittance %>
            drInEpsLW = <%= $infrared_emittance %>
            drExRf = <%= $rough_surface_value %>
          <% end %> 
        <% end %>
      <% end %> 
    



      <% if floor == 1 # Add ground surface for non-plenum zones on first floor %>
        SURFACE <%= create_surface_name(zone_floor_name, "Ground") %>
          sfType = "FLOOR"
          sfArea = <%= zone[:area] %>
        <% if adiabatic_floor %> 
            sfExCnd = "ADIABATIC"
            sfCon = "Slab-On-Grade Adiabatic"
            sfModel = FORWARD_DIFFERENCE
            <% set_common_surface_variables() %>
        <% else %>
            sfExCnd = "GROUND"
            sfCon = "Slab-On-Grade Non-Adiabatic"
            sfModel = KIVA
            sfFnd = "Foundation"
            sfExpPerim = <%= exposed_perimeter %>
            <% set_common_surface_variables() %>
        <% end %>
      <% else # Add floor surface for non-plenum surface on second or third floors %>
        <% plenum_below_zone_floor_name = "#{floors[floor_index-1]}_Plenum" %>
        SURFACE <%= create_surface_name(zone_floor_name, plenum_below_zone_floor_name) %>
          sfType = "FLOOR"
          sfArea = <%= zone[:area] %>
          sfExCnd = "ADJZN"
          sfAdjZn = <%= plenum_below_zone_floor_name %>
          sfCon = "Interior Floor"
          sfModel = FORWARD_DIFFERENCE
          <% set_common_surface_variables() %>
      <% end %>
        <% plenum_above_zone_floor_name = "#{floor_name}_Plenum" %>
        SURFACE <%= create_surface_name(zone_floor_name, plenum_above_zone_floor_name) %>
          sfType = "CEILING"
          sfArea = <%= zone[:area] %>
          sfExCnd = "ADJZN"
          sfAdjZn = <%= plenum_above_zone_floor_name %>
          sfCon = "Dropped Ceiling"
          sfModel = FORWARD_DIFFERENCE
          <% set_common_surface_variables() %>
    <% end %>
  <% end %>
<% end %>

<%

outdoor_air_density = "Outdoor air density a [kg/m3]"

infiltration_mass_flow_rate = "Infiltration mass flow rate [kg/s] b"
infiltration_moisture_added = "Moisture added to the zone due to the infiltration [kg water/kg dry air]"

ventilation_mass_flow_rate = "Ventilation mass flow rate [kg/s] b"
ventilation_moisture_added = "Moisture added to the zone due to the ventilation [kg water/kg dry air]"

window_solar_radiation_rate = "Total window transmitted solar radiation rate [kW] c,d"
window_net_heat_transfer_rate = "Total net heat transfer rate through the windows [kW] c,e"

exterior_wall_exterior_surface_conduction_rate = "Total exterior surface conduction heat transfer rate [kW] c"
exterior_wall_exterior_surface_incident_solar_rate = "Total exterior surface incident solar radiation rate [kW] d"
exterior_wall_exterior_surface_convection_rate = "Total exterior surface convection heat transfer rate [kW] f"
exterior_wall_interior_surface_conduction_rate = "Total interior surface conduction heat transfer rate [kW] c"
exterior_wall_interior_surface_convection_rate = "Total interior surface convection heat transfer rate [kW] f"

slab_on_grade_interior_surface_convection_rate = "Total interior surface convection heat transfer rate [kW] ^"

bottom_perimeter_south = "Bottom_Perimeter_South"
bottom_perimeter_south_exterior = "Bottom_Exterior_South"
ground = "Ground"

bottom_perimeter_infiltration = "#{bottom_perimeter_south}_Infiltration"
bottom_perimeter_ventilation = "#{bottom_perimeter_south}_Ventilation"

bottom_perimeter_south_afmeter = "AFMETER_#{bottom_perimeter_south}"

exterior_wall_surface_name = create_surface_name(bottom_perimeter_south, bottom_perimeter_south_exterior)
ground_surface_name = create_surface_name(bottom_perimeter_south, ground)

exterior_wall_area = perimeter_ns_length * $floor_height
slab_area = perimeter_ns_area

%>

EXPORTFILE "OUTPUT_SUB_HOURLY"
  xfFileName = "OUTPUT_SUB_HOURLY.csv"
  xfFileStat = OVERWRITE

EXPORT
  exExportfile = "OUTPUT_SUB_HOURLY"
  exHeader = ColumnsOnly
  exFooter = No
  exType = UDT
  exFreq = SUBHOUR
  exDayBeg = JAN 1
  exDayEnd = DEC 31

EXPORTCOL colHead="Month" colVal=$month
EXPORTCOL colHead="Day" colVal=$dayOfMonth
EXPORTCOL colHead="Hour" colVal=$hour
EXPORTCOL colHead="SubHour" colVal=$subhour

EXPORTCOL colHead="Dry Air Mass" colVal = @zone["<%= bottom_perimeter_south %>"].dryAirMass * <%= 1 / $kg_lbm %>
EXPORTCOL colHead="ACH" colVal = @zone["<%= bottom_perimeter_south %>"].ivAirX
EXPORTCOL colHead="Moist Air Density [kg/m3]" colVal = @zone["<%= bottom_perimeter_south %>"].rho * <%= $m3_ft3 / $kg_lbm %>

EXPORTCOL colHead="<%= "#{window_net_heat_transfer_rate} Conduction" %>" colVal= @xsurf["<%= "Window_#{bottom_perimeter_south}" %>"].sbcI.qSrf * <%= -1 * $m2_ft2 * $window_area * 7 / $kw_btuh %>

EXPORTCOL colHead="Total Sensible Heat Transfer [kW] qIzSh" colVal= @zone["<%= bottom_perimeter_south %>"].qIzSh * <%= 1 / $kj_btu / $h_s %>



EXPORTFILE "OUTPUT_HOURLY"
  xfFileName = "OUTPUT_HOURLY.csv"
  xfFileStat = OVERWRITE

EXPORT
  exExportfile = "OUTPUT_HOURLY"
  exHeader = ColumnsOnly
  exFooter = No
  exType = UDT
  exFreq = HOUR
  exDayBeg = JAN 1
  exDayEnd = DEC 31

EXPORTCOL colHead="Month" colVal=$month
EXPORTCOL colHead="Day" colVal=$dayOfMonth
EXPORTCOL colHead="Hour" colVal=$hour

<% for floor in floors
  for zone in zones
    zone_name = zone[:name]
    zone_floor_name = "#{floor}_#{zone_name}" %>
    EXPORTCOL colHead="<%= "ZoneAirTemp_#{zone_floor_name}" %>" colVal=(@znRes[<%= zone_floor_name %>].H.tAir - 32) / 1.8
    EXPORTCOL colHead="<%= "SensibleCoolingRate_#{zone_floor_name}" %>" colVal=@znRes[<%= zone_floor_name %>].H.qscHvac / <%= $kw_btuh %> * <%= -1 %>
    EXPORTCOL colHead="<%= "HeatingRate_#{zone_floor_name}" %>" colVal=@znRes[<%= zone_floor_name %>].H.qhMech / <%= $kw_btuh %>
    EXPORTCOL colHead="<%= "LightingPower_#{zone_floor_name}" %>" colVal=@meter[<%= "MtrLighting_#{zone_floor_name}" %>].H.lit / <%= $kw_btuh %>
    EXPORTCOL colHead="<%= "PlugLoadPower_#{zone_floor_name}" %>" colVal=@meter[<%= "MtrPlugLoad_#{zone_floor_name}" %>].H.rcp / <%= $kw_btuh %>
  <% end
end %>

EXPORTCOL colHead="<%= outdoor_air_density %>" colVal= @top.rhoMoistOSh * <%= $m3_ft3 / $kg_lbm %>

EXPORTCOL colHead="<%= infiltration_mass_flow_rate %>" colVal=@AFMETER["<%= bottom_perimeter_south_afmeter %>"].H[0].infEx * <%= $standard_air_density / $kg_lbm / $min_s %> // Infiltration mass flow rate

EXPORTCOL colHead="Air Specific Heat [btu/lb*F]" colVal= @top.airSH
EXPORTCOL colHead="Outdoor Temp [F]" colVal=@top.tDbOHr
EXPORTCOL colHead="Indoor Temp [F]" colVal=@znRes[<%= zone_floor_name %>].H.tAir
EXPORTCOL colHead="Outdoor Humidity Ratio [kg/kg]" colVal= @top.wOHr
EXPORTCOL colHead="Indoor Humidity Ratio [kg/kg]" colVal=@znRes[<%= zone_floor_name %>].H.wAir

EXPORTCOL colHead="<%= infiltration_moisture_added %>" colVal=0

EXPORTCOL colHead="<%= ventilation_mass_flow_rate %>" colVal=@AFMETER["<%= bottom_perimeter_south_afmeter %>"].H[0].fanEx * <%= $standard_air_density / $kg_lbm / $min_s %> // Ventilation mass flow rate
EXPORTCOL colHead="Sensible Heat Change [kJ/kg]" colVal= @top.airSH * <%= $kg_lbm / $kj_btu %> * (@top.tDbOHr - @znRes[<%= zone_floor_name %>].H.tAir) // Used to calculate ventilation sensible heat transfer
EXPORTCOL colHead="Latent Heat Change [kJ/kg]" colVal= <%= $latent_heat_of_evaporation_water * $kg_lbm / $kj_btu %> * (@top.wOHr - @znRes[<%= zone_floor_name %>].H.wAir) // Used to calculate ventilation latent heat transfer

EXPORTCOL colHead="<%= ventilation_moisture_added %>" colVal=0

EXPORTCOL colHead="Total Sensible Heat Transfer [kW]" colVal= @znRes["<%= bottom_perimeter_south %>"].H.qsIz * <%= 1 / $kj_btu / $h_s %>
EXPORTCOL colHead="Total Latent Heat Transfer [kW]" colVal= @znRes["<%= bottom_perimeter_south %>"].H.qlIz * <%= 1 / $kj_btu / $h_s %>

EXPORTCOL colHead="<%= window_solar_radiation_rate %>" colVal=@znRes["<%= bottom_perimeter_south %>"].H.qSlr * <%= 1 / $kw_btuh %> 
EXPORTCOL colHead="<%= "#{window_net_heat_transfer_rate} Incident Radiation" %>" colVal=@znRes["<%= bottom_perimeter_south %>"].H.qSlr * <%= 1 / $kw_btuh %>

EXPORTCOL colHead="<%= exterior_wall_exterior_surface_conduction_rate %>" colVal=@xsurf["<%= exterior_wall_surface_name %>"].sbcO.qSrf * <%= 1 / $kw_btuh * exterior_wall_area %>
EXPORTCOL colHead="<%= exterior_wall_exterior_surface_incident_solar_rate %>" colVal=(@xsurf["<%= exterior_wall_surface_name %>"].sbcO.sgTarg.bm + @xsurf["<%= exterior_wall_surface_name %>"].sbcO.sgTarg.df) * <%= 1 / $kw_btuh * (exterior_wall_area - $window_area * 7) %> // Number of windows on bottom perimeter south exterior wall is 7

EXPORTCOL colHead="<%= exterior_wall_exterior_surface_convection_rate %>" colVal=@xsurf["<%= exterior_wall_surface_name %>"].sbcO.hxa * (@xsurf["<%= exterior_wall_surface_name %>"].sbcO.txa - @xsurf["<%= exterior_wall_surface_name %>"].sbcO.tsrf) * <%= 1 / $kw_btuh * exterior_wall_area %>
EXPORTCOL colHead="<%= exterior_wall_interior_surface_conduction_rate %>" colVal=@xsurf["<%= exterior_wall_surface_name %>"].sbcI.qSrf * <%= 1 / $kw_btuh * exterior_wall_area %>
EXPORTCOL colHead="<%= exterior_wall_interior_surface_convection_rate %>" colVal=@xsurf["<%= exterior_wall_surface_name %>"].sbcI.hxa * (@xsurf["<%= exterior_wall_surface_name %>"].sbcI.txa - @xsurf["<%= exterior_wall_surface_name %>"].sbcI.tsrf) * <%= 1 / $kw_btuh * exterior_wall_area %>

EXPORTCOL colHead="<%= slab_on_grade_interior_surface_convection_rate %>" colVal=@xsurf["<%= ground_surface_name %>"].sbcI.hxa * (@xsurf["<%= ground_surface_name %>"].sbcI.txa - @xsurf["<%= ground_surface_name %>"].sbcI.tsrf) * <%= 1 / $kw_btuh * slab_area %>

RUN